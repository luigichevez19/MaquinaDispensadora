import { InjectionToken, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { Settings, PersistenceSettings, CollectionReference, DocumentReference, QueryFn, QueryGroupFn, AssociatedReference } from './interfaces';
import { AngularFirestoreDocument } from './document/document';
import { AngularFirestoreCollection } from './collection/collection';
import { AngularFirestoreCollectionGroup } from './collection-group/collection-group';
import { FirebaseFirestore, FirebaseOptions, FirebaseAppConfig, ɵAngularFireSchedulers } from '@angular/fire';
import { firestore } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export declare const EnablePersistenceToken: InjectionToken<boolean>;
export declare const PersistenceSettingsToken: InjectionToken<firestore.PersistenceSettings | undefined>;
export declare const FirestoreSettingsToken: InjectionToken<firestore.Settings>;
export declare const ENABLE_PERSISTENCE: InjectionToken<boolean>;
export declare const PERSISTENCE_SETTINGS: InjectionToken<firestore.PersistenceSettings | undefined>;
export declare const SETTINGS: InjectionToken<firestore.Settings>;
export declare const DefaultFirestoreSettings: firestore.Settings;
export declare function associateQuery(collectionRef: CollectionReference, queryFn?: (ref: any) => any): AssociatedReference;
export declare class AngularFirestore {
    readonly firestore: FirebaseFirestore;
    readonly persistenceEnabled$: Observable<boolean>;
    readonly schedulers: ɵAngularFireSchedulers;
    readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, shouldEnablePersistence: boolean | null, settings: Settings | null, platformId: Object, zone: NgZone, persistenceSettings: PersistenceSettings | null);
    collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T>;
    collection<T>(ref: CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T>;
    collectionGroup<T>(collectionId: string, queryGroupFn?: QueryGroupFn): AngularFirestoreCollectionGroup<T>;
    doc<T>(path: string): AngularFirestoreDocument<T>;
    doc<T>(ref: DocumentReference): AngularFirestoreDocument<T>;
    createId(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFirestore>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AngularFirestore>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZXN0b3JlLmQudHMiLCJzb3VyY2VzIjpbImZpcmVzdG9yZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNldHRpbmdzLCBQZXJzaXN0ZW5jZVNldHRpbmdzLCBDb2xsZWN0aW9uUmVmZXJlbmNlLCBEb2N1bWVudFJlZmVyZW5jZSwgUXVlcnlGbiwgUXVlcnlHcm91cEZuLCBBc3NvY2lhdGVkUmVmZXJlbmNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudCB9IGZyb20gJy4vZG9jdW1lbnQvZG9jdW1lbnQnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb24gfSBmcm9tICcuL2NvbGxlY3Rpb24vY29sbGVjdGlvbic7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbkdyb3VwIH0gZnJvbSAnLi9jb2xsZWN0aW9uLWdyb3VwL2NvbGxlY3Rpb24tZ3JvdXAnO1xuaW1wb3J0IHsgRmlyZWJhc2VGaXJlc3RvcmUsIEZpcmViYXNlT3B0aW9ucywgRmlyZWJhc2VBcHBDb25maWcsIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgeyBmaXJlc3RvcmUgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRW5hYmxlUGVyc2lzdGVuY2VUb2tlbjogSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBQZXJzaXN0ZW5jZVNldHRpbmdzVG9rZW46IEluamVjdGlvblRva2VuPGZpcmVzdG9yZS5QZXJzaXN0ZW5jZVNldHRpbmdzIHwgdW5kZWZpbmVkPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEZpcmVzdG9yZVNldHRpbmdzVG9rZW46IEluamVjdGlvblRva2VuPGZpcmVzdG9yZS5TZXR0aW5ncz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBFTkFCTEVfUEVSU0lTVEVOQ0U6IEluamVjdGlvblRva2VuPGJvb2xlYW4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgUEVSU0lTVEVOQ0VfU0VUVElOR1M6IEluamVjdGlvblRva2VuPGZpcmVzdG9yZS5QZXJzaXN0ZW5jZVNldHRpbmdzIHwgdW5kZWZpbmVkPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNFVFRJTkdTOiBJbmplY3Rpb25Ub2tlbjxmaXJlc3RvcmUuU2V0dGluZ3M+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRGVmYXVsdEZpcmVzdG9yZVNldHRpbmdzOiBmaXJlc3RvcmUuU2V0dGluZ3M7XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBhc3NvY2lhdGVRdWVyeShjb2xsZWN0aW9uUmVmOiBDb2xsZWN0aW9uUmVmZXJlbmNlLCBxdWVyeUZuPzogKHJlZjogYW55KSA9PiBhbnkpOiBBc3NvY2lhdGVkUmVmZXJlbmNlO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVzdG9yZSB7XG4gICAgcmVhZG9ubHkgZmlyZXN0b3JlOiBGaXJlYmFzZUZpcmVzdG9yZTtcbiAgICByZWFkb25seSBwZXJzaXN0ZW5jZUVuYWJsZWQkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIHJlYWRvbmx5IHNjaGVkdWxlcnM6IMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzO1xuICAgIHJlYWRvbmx5IGtlZXBVbnN0YWJsZVVudGlsRmlyc3Q6IDxUPihvYnM6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc6IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgbnVsbCB8IHVuZGVmaW5lZCwgc2hvdWxkRW5hYmxlUGVyc2lzdGVuY2U6IGJvb2xlYW4gfCBudWxsLCBzZXR0aW5nczogU2V0dGluZ3MgfCBudWxsLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHpvbmU6IE5nWm9uZSwgcGVyc2lzdGVuY2VTZXR0aW5nczogUGVyc2lzdGVuY2VTZXR0aW5ncyB8IG51bGwpO1xuICAgIGNvbGxlY3Rpb248VD4ocGF0aDogc3RyaW5nLCBxdWVyeUZuPzogUXVlcnlGbik6IEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uPFQ+O1xuICAgIGNvbGxlY3Rpb248VD4ocmVmOiBDb2xsZWN0aW9uUmVmZXJlbmNlLCBxdWVyeUZuPzogUXVlcnlGbik6IEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uPFQ+O1xuICAgIGNvbGxlY3Rpb25Hcm91cDxUPihjb2xsZWN0aW9uSWQ6IHN0cmluZywgcXVlcnlHcm91cEZuPzogUXVlcnlHcm91cEZuKTogQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb25Hcm91cDxUPjtcbiAgICBkb2M8VD4ocGF0aDogc3RyaW5nKTogQW5ndWxhckZpcmVzdG9yZURvY3VtZW50PFQ+O1xuICAgIGRvYzxUPihyZWY6IERvY3VtZW50UmVmZXJlbmNlKTogQW5ndWxhckZpcmVzdG9yZURvY3VtZW50PFQ+O1xuICAgIGNyZWF0ZUlkKCk6IHN0cmluZztcbn1cbiJdfQ==